package com.gmail.calorious.cyclistdirections.firebase;

import android.content.Context;
import android.util.Log;

import androidx.annotation.NonNull;

import com.gmail.calorious.cyclistdirections.general.CyclistRoom;
import com.gmail.calorious.cyclistdirections.general.User;
import com.google.android.gms.tasks.OnCompleteListener;
import com.google.android.gms.tasks.Task;
import com.google.firebase.FirebaseApp;
import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;

public class FirebaseCenter {
    private DatabaseReference users, rooms;

    // Firebase appends locally, before attempting to sync remotely with the server
    // Purpose of class is to handle firebase requests
    public void initialize(Context context) {
        FirebaseApp.initializeApp(context);
        FirebaseDatabase database = FirebaseDatabase.getInstance("https://cyclistdirections-default-rtdb.asia-southeast1.firebasedatabase.app");
        DatabaseReference defaultRef = database.getReference();
        DatabaseReference usersRef = defaultRef.child("users").push(); // Child reference - users
        DatabaseReference roomsRef = defaultRef.child("rooms").push(); // Child reference - rooms
        this.users = usersRef;
        this.rooms = roomsRef;
    }

    // Extract room data from object
    public void newRoom(CyclistRoom room) {
        // Rooms are volatile
        DatabaseReference roomDataRef = rooms.child(room.getId()).push();
        roomDataRef.child("id").push().setValue(room.getId()).addOnSuccessListener(new FirebaseQuerySuccess()).addOnFailureListener(new FirebaseQueryFailure()).addOnCanceledListener(new FirebaseQueryCancelled());
        // TODO Account for changing active users value
        roomDataRef.child("users").push().setValue(room.getActiveUsers()).addOnSuccessListener(new FirebaseQuerySuccess()).addOnFailureListener(new FirebaseQueryFailure()).addOnCanceledListener(new FirebaseQueryCancelled());
        // TODO Account for changing started value
        roomDataRef.child("started").push().setValue(room.started()).addOnSuccessListener(new FirebaseQuerySuccess()).addOnFailureListener(new FirebaseQueryFailure()).addOnCanceledListener(new FirebaseQueryCancelled());
    }

    public void newUser(User user) {
        // Users are not volatile - but all their data may be changed.
        // User unique id is generated by application, ensure that it can't be changed yourself.
        DatabaseReference userDataRef = users.child(user.getUniqueIdentifier()).push();
        userDataRef.child("brand").push().setValue(user.getBrand()).addOnSuccessListener(new FirebaseQuerySuccess()).addOnFailureListener(new FirebaseQueryFailure()).addOnCanceledListener(new FirebaseQueryCancelled());
        userDataRef.child("model").push().setValue(user.getModel()).addOnSuccessListener(new FirebaseQuerySuccess()).addOnFailureListener(new FirebaseQueryFailure()).addOnCanceledListener(new FirebaseQueryCancelled());
        userDataRef.child("id").push().setValue(user.getUniqueIdentifier()).addOnSuccessListener(new FirebaseQuerySuccess()).addOnFailureListener(new FirebaseQueryFailure()).addOnCanceledListener(new FirebaseQueryCancelled());
        userDataRef.child("macAddress").push().setValue(user.getMacAddress()).addOnSuccessListener(new FirebaseQuerySuccess()).addOnFailureListener(new FirebaseQueryFailure()).addOnCanceledListener(new FirebaseQueryCancelled());
        userDataRef.child("enc_64_androidId").push().setValue(user.getEncodedAndroidId()).addOnSuccessListener(new FirebaseQuerySuccess()).addOnFailureListener(new FirebaseQueryFailure()).addOnCanceledListener(new FirebaseQueryCancelled());
    }

    public User getUser(String uniqueId) {
        // User keys: [id, macAddress, enc_64_androidId] \\
        users.child(uniqueId).get().addOnCompleteListener((task) -> {
                if(!task.isSuccessful()) {
                    Log.e("Firebase Cloud", "Failed to obtain data snapshot for getUser()");
                    Log.e("Firebase Cloud", "Data was requested for unique id: " + uniqueId);
                    return;
                }
                Log.i("Firebase Cloud", "Successfully received a response from Firebase!");
                DataSnapshot snapshot = task.getResult();
                String brand, model, id, macAddress, enc_64_androidId;
                try {
                    brand = (String) snapshot.child("brand").getValue();
                    model = (String) snapshot.child("model").getValue();
                    id = (String) snapshot.child("id").getValue();
                    macAddress = (String) snapshot.child("macAddress").getValue();
                    enc_64_androidId = (String) snapshot.child("enc_64_androidId").getValue();
                } catch(ClassCastException exception) {
                    Log.e("Firebase Cloud", "Failed to convert User objects to String.");
                    exception.printStackTrace();
                }
        });
    }
}
